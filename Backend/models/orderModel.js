const mongoose = require('mongoose');

const orderItemSchema = new mongoose.Schema({
  product: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true
  },
  name: {
    type: String,
    required: true
  },
  image: {
    type: String,
    required: true
  },
  price: {
    type: Number,
    required: true
  },
  quantity: {
    type: Number,
    required: true,
    min: 1
  }
});

const shippingAddressSchema = new mongoose.Schema({
  fullName: {
    type: String,
    required: true
  },
  address: {
    type: String,
    required: true
  },
  city: {
    type: String,
    required: true
  },
  state: {
    type: String,
    required: true
  },
  pinCode: {
    type: String,
    required: true
  },
  phone: {
    type: String,
    required: true
  }
});

const orderSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  orderItems: [orderItemSchema],
  shippingAddress: shippingAddressSchema,
  paymentMethod: {
    type: String,
    required: true,
    enum: ['razorpay', 'cod', 'card'],
    default: 'razorpay'
  },
  paymentResult: {
    id: String,
    status: String,
    update_time: String,
    razorpay_payment_id: String,
    razorpay_order_id: String,
    razorpay_signature: String
  },
  itemsPrice: {
    type: Number,
    required: true,
    default: 0.0
  },
  taxPrice: {
    type: Number,
    required: true,
    default: 0.0
  },
  shippingPrice: {
    type: Number,
    required: true,
    default: 0.0
  },
  totalPrice: {
    type: Number,
    required: true,
    default: 0.0
  },
  orderStatus: {
    type: String,
    required: true,
    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],
    default: 'pending'
  },
  isPaid: {
    type: Boolean,
    required: true,
    default: false
  },
  paidAt: {
    type: Date
  },
  isDelivered: {
    type: Boolean,
    required: true,
    default: false
  },
  deliveredAt: {
    type: Date
  },
  orderNumber: {
    type: String,
    unique: true,
    // Remove required: true since it's generated by pre-save hook
  },
  notes: {
    type: String
  }
}, {
  timestamps: true
});

// Generate simple order number before saving
orderSchema.pre('save', async function(next) {
  if (!this.orderNumber) {
    // Get the count of existing orders to generate incremental number
    const orderCount = await mongoose.model('Order').countDocuments();
    
    // Start from 1001 for a professional look
    const orderNum = 1001 + orderCount;
    this.orderNumber = orderNum.toString();
    
    // Ensure uniqueness - if number exists, find next available
    let attempts = 0;
    let currentNum = orderNum;
    
    while (attempts < 100) {
      const existingOrder = await mongoose.model('Order').findOne({ orderNumber: currentNum.toString() });
      if (!existingOrder) {
        this.orderNumber = currentNum.toString();
        break;
      }
      currentNum++;
      attempts++;
    }
  }
  next();
});

// Virtual for order ID display
orderSchema.virtual('displayId').get(function() {
  return this.orderNumber;
});

// Calculate total items in order
orderSchema.virtual('totalItems').get(function() {
  return this.orderItems.reduce((total, item) => total + item.quantity, 0);
});

module.exports = mongoose.model('Order', orderSchema);
